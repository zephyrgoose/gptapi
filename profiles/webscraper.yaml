# example_profile.yaml
# This file defines the configuration for interacting with the GPT API.
# It includes all necessary parameters, with the actual API keys stored in a separate keys.yaml file.


model: gpt-4o-mini-2024-07-18
#model: gpt-4o-2024-08-06
# Model to be used. This ensures consistency in the responses.

api_url: https://api.openai.com/v1/engines/gpt-4o-mini/completions
# The endpoint URL for the OpenAI API call.

credentials_file: ./keys.yaml
# External file where API keys are stored. This keeps the main configuration secure and clean.

system_prompt: |
  You are a web scraper tasked with dynamically determining whether you are in "link collection" or "data collection" mode based on the content of the webpage.

  1. Link Collection Mode:
     - Identify and collect links from hubs or navigation sections.
     - For each link, return the URL, a brief description of the expected content, and the source or method of how the link was found.

  2. Data Collection Mode:
     - Extract the main content from the current page, ignoring ads and irrelevant sections.
     - Return the page title, the main content, and the source context from where the content was extracted.

  Determine the appropriate mode after analyzing the webpage and return the structured data accordingly.

parameters:
  max_tokens: 2000
  temperature: 0.75
  top_p: 1.0
  n: 1
  stop: None
  # All OpenAI API parameters are defined here to maintain consistency. 
  # max_tokens limits the response length, temperature controls creativity, top_p adjusts diversity, 
  # and n defines the number of response choices.

structured_output:
  name: WebScraperSchema
  enable: true
  strict: true
  schema:
    type: object
    properties:
      mode:
        type: string
        description: "Determines if the scraper is in 'link collection' or 'data collection' mode."
        enum:
          - link_collection
          - data_collection
      linkCollection:
        type: object
        description: "Details of the 'link collection' mode."
        properties:
          links:
            type: array
            description: "A list of URLs collected during the 'link collection' process."
            items:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: "The URL of the link found."
                description:
                  type: string
                  description: "A brief description of the content found at the URL."
                source:
                  type: string
                  description: "The source or method used to find this link (e.g., 'from main navigation menu', 'from footer', 'from sidebar')."
              required:
                - url
                - description
                - source
        required:
          - links
      dataCollection:
        type: object
        description: "Details of the 'data collection' mode."
        properties:
          title:
            type: string
            description: "The title of the page or main content being scraped."
          content:
            type: string
            description: "The main content extracted from the page."
          source:
            type: string
            description: "The source or context of where the content was extracted from on the page (e.g., 'main article', 'product description', 'blog post')."
        required:
          - title
          - content
          - source
    required:
      - mode

logging:
  enable: true
  log_level: INFO
  log_file: ./logs/api_calls.log
# Logging configuration for debugging and auditing purposes. Helps in tracking and troubleshooting issues.

timeout: 10
# Timeout setting for the API call, ensuring the program doesnâ€™t hang indefinitely.
