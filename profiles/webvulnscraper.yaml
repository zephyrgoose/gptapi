# example_profile.yaml
# This file defines the configuration for interacting with the GPT API.
# It includes all necessary parameters, with the actual API keys stored in a separate keys.yaml file.


model: gpt-4o-mini-2024-07-18
#model: gpt-4o-2024-08-06
# Model to be used. This ensures consistency in the responses.

api_url: https://api.openai.com/v1/engines/gpt-4o-mini/completions
# The endpoint URL for the OpenAI API call.

credentials_file: ./keys.yaml
# External file where API keys are stored. This keeps the main configuration secure and clean.

system_prompt: |
  You are a web scraper focused on collecting threat intelligence data from various sources on the internet. Depending on the content of the webpage, dynamically determine whether you are in "link aggregation" or "data scraping" mode.

  1. Link Aggregation Mode:
     - Identify and collect links from hubs, directories, or indexes of threat intelligence reports, indicators of compromise (IOCs), or related resources.
     - For each link, return the URL, a brief description of the expected threat intelligence content (e.g., "APT report", "malware analysis", "phishing indicators"), and the source or method of how the link was found (e.g., "from main navigation", "from a list of recent reports").

  2. Data Scraping Mode:
     - Extract the main content from the current page focused on threat intelligence, such as details about specific threats, attack techniques, or IOCs. Ignore ads, distractions, or unrelated content.
     - Return the page title, the extracted content, and the source context of where the content was extracted from on the page (e.g., "main report body", "analysis section", "IOC table").

  Determine the appropriate mode after analyzing the webpage and return the structured data accordingly.

parameters:
  max_tokens: 3000
  temperature: 0.75
  top_p: 1.0
  n: 1
  stop: None
  # All OpenAI API parameters are defined here to maintain consistency. 
  # max_tokens limits the response length, temperature controls creativity, top_p adjusts diversity, 
  # and n defines the number of response choices.

structured_output:
  name: ThreatIntelligenceScraperSchema
  enable: true
  strict: true
  schema:
    type: object
    properties:
      mode:
        type: string
        description: "Determines if the scraper is in 'link aggregation' or 'data scraping' mode."
        enum:
          - link_aggregation
          - data_scraping
      linkAggregation:
        type: object
        description: "Details of the 'link aggregation' mode."
        properties:
          links:
            type: array
            description: "Each item represents only an important, relevant link found during aggregation, including the URL, a brief description of the threat intelligence content, and the source."
            items:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: "The URL of the important, relevant link found."
                description:
                  type: string
                  description: "A brief description of the specific threat intelligence content expected at the URL."
                source:
                  type: string
                  description: "A descriptive source or method of how the link was found."
              required:
                - url
                - description
                - source
        required:
          - links
      dataScraping:
        type: object
        description: "Details of the 'data scraping' mode."
        properties:
          title:
            type: string
            description: "The title of the page or main content being scraped."
          content:
            type: string
            description: "The main content extracted from the page, focused on threat intelligence - succinct, but technically detailed."
          summary:
            type: string
            description: "A technically and factually dense, succinct, lossless summary of the main content extracted from the page, with a focus on threat intelligence."
          important:
            type: boolean
            description: "Indicates if the content is of the highest significance importance or relevance - if we as a competent security team with safeguards in place act RIGHT NOW."
          threatBreakdown:
            type: array
            description: "A breakdown of specific threats, exploits, or concerns mentioned in the content."
            items:
              type: object
              description: "Each item in the array represents a specific threat or exploit, including details on its type, specificity, and severity."
              properties:
                threatType:
                  type: string
                  description: "A summary of the type of threat."
                description:
                  type: string
                  description: "A detailed description of the threat, exploit, concern, or otherwise important information."
                scope:
                  type: string
                  description: "Succinct, technical description to be able to determine if we are exposed - how do we tell?"
              required:
              - threatType
              - description
              - scope
          source:
            type: string
            description: "The source or context of where the content was extracted from on the page."
          date:
            type: string
            format: date-time
            description: "The date and time when the content was scraped or published."
        required:
          - title
          - content
          - summary
          - important
          - date
    required:
      - mode

logging:
  enable: true
  log_level: INFO
  log_file: ./logs/api_calls.log
# Logging configuration for debugging and auditing purposes. Helps in tracking and troubleshooting issues.

timeout: 10
# Timeout setting for the API call, ensuring the program doesnâ€™t hang indefinitely.
